
---

# üîπ Unidad 1.3 ‚Äì Operadores de comparaci√≥n y l√≥gicos

## üéØ Objetivos de aprendizaje

‚Ä¢ Comprender c√≥mo comparar valores en Python.
‚Ä¢ Aprender a combinar condiciones con operadores l√≥gicos.
‚Ä¢ Resolver problemas simples que requieran toma de decisiones.

---

## ‚öñÔ∏è Operadores de comparaci√≥n

Los **operadores de comparaci√≥n** sirven para evaluar relaciones entre dos valores.

* Su resultado **siempre es un valor booleano**: `True` o `False`.
* Son muy utilizados dentro de condicionales (`if`, `while`) para controlar el flujo de ejecuci√≥n.

| Operador | Significado       | Ejemplo (`a=5, b=3`) | Resultado |
| -------- | ----------------- | -------------------- | --------- |
| `==`     | Igual a           | `a == b`             | False     |
| `!=`     | Distinto de       | `a != b`             | True      |
| `>`      | Mayor que         | `a > b`              | True      |
| `<`      | Menor que         | `a < b`              | False     |
| `>=`     | Mayor o igual que | `a >= 5`             | True      |
| `<=`     | Menor o igual que | `b <= 3`             | True      |

üëâ Ejemplo en c√≥digo:

```python
edad = 18
print(edad >= 18)  # True
print(edad < 16)   # False
```

üìå **Detalles importantes**:

* El operador `==` compara valores, no si son el mismo objeto en memoria.
* Para comprobar si dos variables apuntan al mismo objeto, existe el operador `is`.
* Se pueden encadenar comparaciones en Python, algo que no todos los lenguajes permiten:

  ```python
  edad = 20
  print(18 <= edad <= 30)  # True
  ```

---

## üîó Operadores l√≥gicos

Los **operadores l√≥gicos** permiten combinar varias condiciones. Son muy √∫tiles cuando necesitamos que se cumpla m√°s de una condici√≥n o, por el contrario, al menos una de ellas.

| Operador | Significado                                               | Ejemplo               | Resultado |
| -------- | --------------------------------------------------------- | --------------------- | --------- |
| `and`    | Devuelve True si **todas** las condiciones son verdaderas | `(5 > 3) and (8 > 6)` | True      |
| `or`     | Devuelve True si **al menos una** condici√≥n es verdadera  | `(5 > 10) or (3 < 8)` | True      |
| `not`    | Invierte el valor l√≥gico de una condici√≥n                 | `not (5 > 3)`         | False     |

üëâ Ejemplo en c√≥digo:

```python
edad = 20
saldo = 50

puede_comprar = (edad >= 18) and (saldo >= 30)
print(puede_comprar)  # True
```

üìå **Notas importantes**:

* `and` exige que todas las condiciones sean verdaderas.
* `or` basta con que una sola condici√≥n sea verdadera.
* `not` niega un resultado: convierte `True` en `False` y viceversa.
* Python eval√∫a de izquierda a derecha y **corta la evaluaci√≥n** si ya puede decidir el resultado (short-circuit evaluation).

---

## üìù Ejercicio guiado

Crea un script **`comparaciones.py`** que:

1. Guarde en variables: `nota = 7` y `asistencia = 85`.
2. Verifique con un `if` si el alumno aprueba:

   * Debe tener nota mayor o igual a 5 **y** asistencia mayor o igual a 80.
3. Muestre un mensaje:

   * `"Has aprobado"` si cumple ambas condiciones.
   * `"No has aprobado"` en caso contrario.

üëâ C√≥digo de ejemplo:

```python
nota = 7
asistencia = 85

if (nota >= 5) and (asistencia >= 80):
    print("Has aprobado")
else:
    print("No has aprobado")
```

---

## üí° Ejercicio entregar

Crea un script **`login.py`** que:

* Guarde en variables:

  ```python
  usuario_correcto = "admin"
  contrasena_correcta = "1234"
  ```
* Pida al usuario con `input()` un nombre y contrase√±a.
* Use operadores de comparaci√≥n y l√≥gicos para verificar:

  * Si ambos coinciden ‚Üí mostrar `"Acceso concedido"`.
  * Si no ‚Üí mostrar `"Acceso denegado"`.

---

## ‚û°Ô∏è RA1. ce2

Se han empleado **operadores de comparaci√≥n** (`==, !=, <, >`) y **l√≥gicos** (`and, or, not`) correctamente en las estructuras condicionales y bucles.
